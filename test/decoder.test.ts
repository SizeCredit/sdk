import { describe, expect, test } from "@jest/globals";
import SDK from "../src";

describe("size-sdk decoder", () => {
  test("should decode ERC20InsufficientBalance", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.7",
    });

    const error = sdk.decode.error(
      "0xe450d38c000000000000000000000000d8dA6BF26964aF9D7eEd9e03E53415D37aA960450000000000000000000000000000000000000000000000000000000000005b290000000000000000000000000000000000000000000000000000000002d8cb0c",
    );
    expect(error).toBe(
      "ERC20InsufficientBalance(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,23337,47762188)",
    );
  });

  test("should decode CR_BELOW_OPENING_LIMIT_BORROW_CR", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.7",
    });

    const error = sdk.decode.error(
      "0x4e25c6da000000000000000000000000d8dA6BF26964aF9D7eEd9e03E53415D37aA960450000000000000000000000000000000000000000000000001bae8b92f96c355b0000000000000000000000000000000000000000000000001bc16d674ec80000",
    );
    expect(error).toBe(
      "CR_BELOW_OPENING_LIMIT_BORROW_CR(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,1994685148337812827,2000000000000000000)",
    );
  });

  test("should decode calldata of ideal flow", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.8",
      sizeFactory: "0x0000000000000000000000000000000000000001",
    });

    const data = sdk.decode.calldata(
      "0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000960000000000000000000000000000000000000000000000000000000000000004491c769ce000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001045ec49544000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000084fa823af50000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e45ec495440000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001643962a6860000000000000000000000000000000000000000000000000000000000020000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000070dbd880ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001045ec49544000000000000000000000000000000000000000000000000000000000000045600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000084fa823af50000000000000000000000000000000000000000000000000000000000007777000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e45ec495440000000000000000000000000000000000000000000000000000000000000456000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001643962a6860000000000000000000000000000000000000000000000000000000000030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000070dbd880ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001045ec49544000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000084f54ae18b0000000000000000000000000000000000000000000000000000000000008888ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004491c769ce000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    );
    expect(data).toBe(
      `multicall(
  [
    setAuthorization(
      0x000000000000000000000000000000000000FFff,
      [DEPOSIT,WITHDRAW,SELL_CREDIT_MARKET]
    ),
    callMarket(
      0x0000000000000000000000000000000000000123,
      depositOnBehalfOf(
        {
          params: {
            token: 0x4200000000000000000000000000000000000006,
            amount: 300,
            to: 0x0000000000000000000000000000000000010000
          },
          onBehalfOf: 0x0000000000000000000000000000000000010000
        }
      )
    ),
    callMarket(
      0x0000000000000000000000000000000000000123,
      sellCreditMarketOnBehalfOf(
        {
          params: {
            lender: 0x0000000000000000000000000000000000020000,
            creditPositionId: type(uint256).max,
            amount: 100,
            tenor: 31536000,
            deadline: 1893456000,
            maxAPR: type(uint256).max,
            exactAmountIn: false,
            collectionId: 0,
            rateProvider: address(0)
          },
          onBehalfOf: 0x0000000000000000000000000000000000010000,
          recipient: 0x0000000000000000000000000000000000010000
        }
      )
    ),
    callMarket(
      0x0000000000000000000000000000000000000456,
      depositOnBehalfOf(
        {
          params: {
            token: 0x0000000000000000000000000000000000007777,
            amount: 400,
            to: 0x0000000000000000000000000000000000010000
          },
          onBehalfOf: 0x0000000000000000000000000000000000010000
        }
      )
    ),
    callMarket(
      0x0000000000000000000000000000000000000456,
      sellCreditMarketOnBehalfOf(
        {
          params: {
            lender: 0x0000000000000000000000000000000000030000,
            creditPositionId: type(uint256).max,
            amount: 100,
            tenor: 31536000,
            deadline: 1893456000,
            maxAPR: type(uint256).max,
            exactAmountIn: false,
            collectionId: 0,
            rateProvider: address(0)
          },
          onBehalfOf: 0x0000000000000000000000000000000000010000,
          recipient: 0x0000000000000000000000000000000000010000
        }
      )
    ),
    callMarket(
      0x0000000000000000000000000000000000000123,
      withdrawOnBehalfOf(
        {
          params: {
            token: 0x0000000000000000000000000000000000008888,
            amount: type(uint256).max,
            to: 0x0000000000000000000000000000000000010000
          },
          onBehalfOf: 0x0000000000000000000000000000000000010000
        }
      )
    ),
    setAuthorization(
      0x000000000000000000000000000000000000FFff,
      []
    )
  ]
)`,
    );
  });

  test("should decode calldata of deposit", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.8",
      sizeFactory: "0x0000000000000000000000000000000000000001",
    });

    const data = sdk.decode.calldata(
      "0x0cf8542f000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000001337",
    );
    expect(data).toBe(
      `deposit(
  {
    token: 0x4200000000000000000000000000000000000006,
    amount: 100,
    to: 0x0000000000000000000000000000000000001337
  }
)`,
    );
  });

  test("should decode calldata of undefined", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.7",
    });

    const data = sdk.decode.calldata("0x");
    expect(data).toBe(`Unknown function call or invalid calldata`);
  });

  test("should decode calldata of approve", async () => {
    const sdk = new SDK({
      markets: [],
      version: "v1.7",
    });

    const data = sdk.decode.calldata(
      "0x095ea7b300000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000064",
    );
    expect(data).toBe(
      `approve(
  0x0000000000000000000000000000000000000123,
  100
)`,
    );
  });
});
