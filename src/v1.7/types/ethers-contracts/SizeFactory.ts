/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type InitializeFeeConfigParamsStruct = {
  swapFeeAPR: BigNumberish;
  fragmentationFee: BigNumberish;
  liquidationRewardPercent: BigNumberish;
  overdueCollateralProtocolPercent: BigNumberish;
  collateralProtocolPercent: BigNumberish;
  feeRecipient: string;
};

export type InitializeFeeConfigParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
] & {
  swapFeeAPR: BigNumber;
  fragmentationFee: BigNumber;
  liquidationRewardPercent: BigNumber;
  overdueCollateralProtocolPercent: BigNumber;
  collateralProtocolPercent: BigNumber;
  feeRecipient: string;
};

export type InitializeRiskConfigParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  minimumCreditBorrowAToken: BigNumberish;
  borrowATokenCap: BigNumberish;
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
};

export type InitializeRiskConfigParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  minimumCreditBorrowAToken: BigNumber;
  borrowATokenCap: BigNumber;
  minTenor: BigNumber;
  maxTenor: BigNumber;
};

export type InitializeOracleParamsStruct = {
  priceFeed: string;
  variablePoolBorrowRateStaleRateInterval: BigNumberish;
};

export type InitializeOracleParamsStructOutput = [string, BigNumber] & {
  priceFeed: string;
  variablePoolBorrowRateStaleRateInterval: BigNumber;
};

export type InitializeDataParamsStruct = {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
  sizeFactory: string;
};

export type InitializeDataParamsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
] & {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
  sizeFactory: string;
};

export type PriceFeedParamsStruct = {
  uniswapV3Pool: string;
  twapWindow: BigNumberish;
  averageBlockTime: BigNumberish;
  baseToken: string;
  quoteToken: string;
  baseAggregator: string;
  quoteAggregator: string;
  baseStalePriceInterval: BigNumberish;
  quoteStalePriceInterval: BigNumberish;
  sequencerUptimeFeed: string;
};

export type PriceFeedParamsStructOutput = [
  string,
  number,
  number,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
] & {
  uniswapV3Pool: string;
  twapWindow: number;
  averageBlockTime: number;
  baseToken: string;
  quoteToken: string;
  baseAggregator: string;
  quoteAggregator: string;
  baseStalePriceInterval: BigNumber;
  quoteStalePriceInterval: BigNumber;
  sequencerUptimeFeed: string;
};

export interface SizeFactoryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "authorizationNonces(address)": FunctionFragment;
    "authorizations(uint256,address,address)": FunctionFragment;
    "createBorrowATokenV1_5(address,address)": FunctionFragment;
    "createMarket((uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint64),(address,address,address,address,address,address))": FunctionFragment;
    "createPriceFeed((address,uint32,uint32,address,address,address,address,uint256,uint256,address))": FunctionFragment;
    "getMarket(uint256)": FunctionFragment;
    "getMarketDescriptions()": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "getMarketsCount()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAuthorized(address,address,uint8)": FunctionFragment;
    "isAuthorizedAll(address,address,uint256)": FunctionFragment;
    "isMarket(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nonTransferrableScaledTokenV1_5Implementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "reinitialize()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAllAuthorizations()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAuthorization(address,uint256)": FunctionFragment;
    "setNonTransferrableScaledTokenV1_5Implementation(address)": FunctionFragment;
    "setSizeImplementation(address)": FunctionFragment;
    "sizeImplementation()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "authorizationNonces"
      | "authorizations"
      | "createBorrowATokenV1_5"
      | "createMarket"
      | "createPriceFeed"
      | "getMarket"
      | "getMarketDescriptions"
      | "getMarkets"
      | "getMarketsCount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAuthorized"
      | "isAuthorizedAll"
      | "isMarket"
      | "multicall"
      | "nonTransferrableScaledTokenV1_5Implementation"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "reinitialize"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeAllAuthorizations"
      | "revokeRole"
      | "setAuthorization"
      | "setNonTransferrableScaledTokenV1_5Implementation"
      | "setSizeImplementation"
      | "sizeImplementation"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationNonces",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "authorizations",
    values: [BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowATokenV1_5",
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      InitializeFeeConfigParamsStruct,
      InitializeRiskConfigParamsStruct,
      InitializeOracleParamsStruct,
      InitializeDataParamsStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createPriceFeed",
    values: [PriceFeedParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketDescriptions",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAll",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "isMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: "nonTransferrableScaledTokenV1_5Implementation",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllAuthorizations",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorization",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setNonTransferrableScaledTokenV1_5Implementation",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "setSizeImplementation",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "sizeImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationNonces",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizations",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowATokenV1_5",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPriceFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketDescriptions",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAll",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonTransferrableScaledTokenV1_5Implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllAuthorizations",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorization",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonTransferrableScaledTokenV1_5Implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSizeImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "CreateBorrowATokenV1_5(address)": EventFragment;
    "CreateMarket(address)": EventFragment;
    "CreatePriceFeed(address)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "NonTransferrableScaledTokenV1_5ImplementationSet(address,address)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevokeAllAuthorizations(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetAuthorization(address,address,uint256,uint256)": EventFragment;
    "SizeImplementationSet(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateBorrowATokenV1_5"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NonTransferrableScaledTokenV1_5ImplementationSet",
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAllAuthorizations"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SizeImplementationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface CreateBorrowATokenV1_5EventObject {
  borrowATokenV1_5: string;
}
export type CreateBorrowATokenV1_5Event = TypedEvent<
  [string],
  CreateBorrowATokenV1_5EventObject
>;

export type CreateBorrowATokenV1_5EventFilter =
  TypedEventFilter<CreateBorrowATokenV1_5Event>;

export interface CreateMarketEventObject {
  market: string;
}
export type CreateMarketEvent = TypedEvent<[string], CreateMarketEventObject>;

export type CreateMarketEventFilter = TypedEventFilter<CreateMarketEvent>;

export interface CreatePriceFeedEventObject {
  priceFeed: string;
}
export type CreatePriceFeedEvent = TypedEvent<
  [string],
  CreatePriceFeedEventObject
>;

export type CreatePriceFeedEventFilter = TypedEventFilter<CreatePriceFeedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NonTransferrableScaledTokenV1_5ImplementationSetEventObject {
  oldNonTransferrableScaledTokenV1_5Implementation: string;
  newNonTransferrableScaledTokenV1_5Implementation: string;
}
export type NonTransferrableScaledTokenV1_5ImplementationSetEvent = TypedEvent<
  [string, string],
  NonTransferrableScaledTokenV1_5ImplementationSetEventObject
>;

export type NonTransferrableScaledTokenV1_5ImplementationSetEventFilter =
  TypedEventFilter<NonTransferrableScaledTokenV1_5ImplementationSetEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevokeAllAuthorizationsEventObject {
  sender: string;
}
export type RevokeAllAuthorizationsEvent = TypedEvent<
  [string],
  RevokeAllAuthorizationsEventObject
>;

export type RevokeAllAuthorizationsEventFilter =
  TypedEventFilter<RevokeAllAuthorizationsEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetAuthorizationEventObject {
  sender: string;
  operator: string;
  actionsBitmap: BigNumber;
  nonce: BigNumber;
}
export type SetAuthorizationEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SetAuthorizationEventObject
>;

export type SetAuthorizationEventFilter =
  TypedEventFilter<SetAuthorizationEvent>;

export interface SizeImplementationSetEventObject {
  oldSizeImplementation: string;
  newSizeImplementation: string;
}
export type SizeImplementationSetEvent = TypedEvent<
  [string, string],
  SizeImplementationSetEventObject
>;

export type SizeImplementationSetEventFilter =
  TypedEventFilter<SizeImplementationSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SizeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SizeFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    authorizationNonces(
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    authorizations(
      nonce: BigNumberish,
      operator: string,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { authorizedActionsBitmap: BigNumber }>;

    createBorrowATokenV1_5(
      variablePool: string,
      underlyingBorrowToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    createMarket(
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    createPriceFeed(
      _priceFeedParams: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getMarket(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getMarketDescriptions(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { descriptions: string[] }>;

    getMarkets(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { _markets: string[] }>;

    getMarketsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isAuthorized(
      operator: string,
      onBehalfOf: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isAuthorizedAll(
      operator: string,
      onBehalfOf: string,
      actionsBitmap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isMarket(candidate: string, overrides?: CallOverrides): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    nonTransferrableScaledTokenV1_5Implementation(
      overrides?: CallOverrides,
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    reinitialize(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    revokeAllAuthorizations(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setAuthorization(
      operator: string,
      actionsBitmap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setNonTransferrableScaledTokenV1_5Implementation(
      _nonTransferrableScaledTokenV1_5Implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setSizeImplementation(
      _sizeImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    sizeImplementation(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  authorizationNonces(
    onBehalfOf: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  authorizations(
    nonce: BigNumberish,
    operator: string,
    onBehalfOf: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  createBorrowATokenV1_5(
    variablePool: string,
    underlyingBorrowToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  createMarket(
    feeConfigParams: InitializeFeeConfigParamsStruct,
    riskConfigParams: InitializeRiskConfigParamsStruct,
    oracleParams: InitializeOracleParamsStruct,
    dataParams: InitializeDataParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  createPriceFeed(
    _priceFeedParams: PriceFeedParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getMarket(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMarketDescriptions(overrides?: CallOverrides): Promise<string[]>;

  getMarkets(overrides?: CallOverrides): Promise<string[]>;

  getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    _owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isAuthorized(
    operator: string,
    onBehalfOf: string,
    action: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isAuthorizedAll(
    operator: string,
    onBehalfOf: string,
    actionsBitmap: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  nonTransferrableScaledTokenV1_5Implementation(
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  reinitialize(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  revokeAllAuthorizations(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setAuthorization(
    operator: string,
    actionsBitmap: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setNonTransferrableScaledTokenV1_5Implementation(
    _nonTransferrableScaledTokenV1_5Implementation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setSizeImplementation(
    _sizeImplementation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  sizeImplementation(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    authorizationNonces(
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    authorizations(
      nonce: BigNumberish,
      operator: string,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createBorrowATokenV1_5(
      variablePool: string,
      underlyingBorrowToken: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    createMarket(
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    createPriceFeed(
      _priceFeedParams: PriceFeedParamsStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    getMarket(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getMarketDescriptions(overrides?: CallOverrides): Promise<string[]>;

    getMarkets(overrides?: CallOverrides): Promise<string[]>;

    getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(_owner: string, overrides?: CallOverrides): Promise<void>;

    isAuthorized(
      operator: string,
      onBehalfOf: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isAuthorizedAll(
      operator: string,
      onBehalfOf: string,
      actionsBitmap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nonTransferrableScaledTokenV1_5Implementation(
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    reinitialize(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeAllAuthorizations(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAuthorization(
      operator: string,
      actionsBitmap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setNonTransferrableScaledTokenV1_5Implementation(
      _nonTransferrableScaledTokenV1_5Implementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSizeImplementation(
      _sizeImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    sizeImplementation(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateBorrowATokenV1_5(address)"(
      borrowATokenV1_5?: string | null,
    ): CreateBorrowATokenV1_5EventFilter;
    CreateBorrowATokenV1_5(
      borrowATokenV1_5?: string | null,
    ): CreateBorrowATokenV1_5EventFilter;

    "CreateMarket(address)"(market?: string | null): CreateMarketEventFilter;
    CreateMarket(market?: string | null): CreateMarketEventFilter;

    "CreatePriceFeed(address)"(
      priceFeed?: string | null,
    ): CreatePriceFeedEventFilter;
    CreatePriceFeed(priceFeed?: string | null): CreatePriceFeedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NonTransferrableScaledTokenV1_5ImplementationSet(address,address)"(
      oldNonTransferrableScaledTokenV1_5Implementation?: string | null,
      newNonTransferrableScaledTokenV1_5Implementation?: string | null,
    ): NonTransferrableScaledTokenV1_5ImplementationSetEventFilter;
    NonTransferrableScaledTokenV1_5ImplementationSet(
      oldNonTransferrableScaledTokenV1_5Implementation?: string | null,
      newNonTransferrableScaledTokenV1_5Implementation?: string | null,
    ): NonTransferrableScaledTokenV1_5ImplementationSetEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    "RevokeAllAuthorizations(address)"(
      sender?: string | null,
    ): RevokeAllAuthorizationsEventFilter;
    RevokeAllAuthorizations(
      sender?: string | null,
    ): RevokeAllAuthorizationsEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;

    "SetAuthorization(address,address,uint256,uint256)"(
      sender?: string | null,
      operator?: string | null,
      actionsBitmap?: BigNumberish | null,
      nonce?: null,
    ): SetAuthorizationEventFilter;
    SetAuthorization(
      sender?: string | null,
      operator?: string | null,
      actionsBitmap?: BigNumberish | null,
      nonce?: null,
    ): SetAuthorizationEventFilter;

    "SizeImplementationSet(address,address)"(
      oldSizeImplementation?: string | null,
      newSizeImplementation?: string | null,
    ): SizeImplementationSetEventFilter;
    SizeImplementationSet(
      oldSizeImplementation?: string | null,
      newSizeImplementation?: string | null,
    ): SizeImplementationSetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    authorizationNonces(
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    authorizations(
      nonce: BigNumberish,
      operator: string,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createBorrowATokenV1_5(
      variablePool: string,
      underlyingBorrowToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    createMarket(
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    createPriceFeed(
      _priceFeedParams: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getMarket(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMarketDescriptions(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isAuthorized(
      operator: string,
      onBehalfOf: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isAuthorizedAll(
      operator: string,
      onBehalfOf: string,
      actionsBitmap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isMarket(candidate: string, overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    nonTransferrableScaledTokenV1_5Implementation(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    reinitialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    revokeAllAuthorizations(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setAuthorization(
      operator: string,
      actionsBitmap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setNonTransferrableScaledTokenV1_5Implementation(
      _nonTransferrableScaledTokenV1_5Implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setSizeImplementation(
      _sizeImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    sizeImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    authorizationNonces(
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    authorizations(
      nonce: BigNumberish,
      operator: string,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createBorrowATokenV1_5(
      variablePool: string,
      underlyingBorrowToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    createMarket(
      feeConfigParams: InitializeFeeConfigParamsStruct,
      riskConfigParams: InitializeRiskConfigParamsStruct,
      oracleParams: InitializeOracleParamsStruct,
      dataParams: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    createPriceFeed(
      _priceFeedParams: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getMarket(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMarketDescriptions(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      operator: string,
      onBehalfOf: string,
      action: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isAuthorizedAll(
      operator: string,
      onBehalfOf: string,
      actionsBitmap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isMarket(
      candidate: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    nonTransferrableScaledTokenV1_5Implementation(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinitialize(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    revokeAllAuthorizations(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setAuthorization(
      operator: string,
      actionsBitmap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setNonTransferrableScaledTokenV1_5Implementation(
      _nonTransferrableScaledTokenV1_5Implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setSizeImplementation(
      _sizeImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sizeImplementation(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
