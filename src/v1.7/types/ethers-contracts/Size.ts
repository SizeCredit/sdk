/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type YieldCurveStruct = {
  tenors: BigNumberish[];
  aprs: BigNumberish[];
  marketRateMultipliers: BigNumberish[];
};

export type YieldCurveStructOutput = [BigNumber[], BigNumber[], BigNumber[]] & {
  tenors: BigNumber[];
  aprs: BigNumber[];
  marketRateMultipliers: BigNumber[];
};

export type BuyCreditLimitParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BuyCreditLimitParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput,
] & { maxDueDate: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type BuyCreditLimitOnBehalfOfParamsStruct = {
  params: BuyCreditLimitParamsStruct;
  onBehalfOf: string;
};

export type BuyCreditLimitOnBehalfOfParamsStructOutput = [
  BuyCreditLimitParamsStructOutput,
  string,
] & { params: BuyCreditLimitParamsStructOutput; onBehalfOf: string };

export type BuyCreditMarketParamsStruct = {
  borrower: string;
  creditPositionId: BigNumberish;
  amount: BigNumberish;
  tenor: BigNumberish;
  deadline: BigNumberish;
  minAPR: BigNumberish;
  exactAmountIn: boolean;
};

export type BuyCreditMarketParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
] & {
  borrower: string;
  creditPositionId: BigNumber;
  amount: BigNumber;
  tenor: BigNumber;
  deadline: BigNumber;
  minAPR: BigNumber;
  exactAmountIn: boolean;
};

export type BuyCreditMarketOnBehalfOfParamsStruct = {
  params: BuyCreditMarketParamsStruct;
  onBehalfOf: string;
  recipient: string;
};

export type BuyCreditMarketOnBehalfOfParamsStructOutput = [
  BuyCreditMarketParamsStructOutput,
  string,
  string,
] & {
  params: BuyCreditMarketParamsStructOutput;
  onBehalfOf: string;
  recipient: string;
};

export type ClaimParamsStruct = { creditPositionId: BigNumberish };

export type ClaimParamsStructOutput = [BigNumber] & {
  creditPositionId: BigNumber;
};

export type CompensateParamsStruct = {
  creditPositionWithDebtToRepayId: BigNumberish;
  creditPositionToCompensateId: BigNumberish;
  amount: BigNumberish;
};

export type CompensateParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  creditPositionWithDebtToRepayId: BigNumber;
  creditPositionToCompensateId: BigNumber;
  amount: BigNumber;
};

export type CompensateOnBehalfOfParamsStruct = {
  params: CompensateParamsStruct;
  onBehalfOf: string;
};

export type CompensateOnBehalfOfParamsStructOutput = [
  CompensateParamsStructOutput,
  string,
] & { params: CompensateParamsStructOutput; onBehalfOf: string };

export type CopyLimitOrderStruct = {
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
  minAPR: BigNumberish;
  maxAPR: BigNumberish;
  offsetAPR: BigNumberish;
};

export type CopyLimitOrderStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  minTenor: BigNumber;
  maxTenor: BigNumber;
  minAPR: BigNumber;
  maxAPR: BigNumber;
  offsetAPR: BigNumber;
};

export type CopyLimitOrdersParamsStruct = {
  copyAddress: string;
  copyLoanOffer: CopyLimitOrderStruct;
  copyBorrowOffer: CopyLimitOrderStruct;
};

export type CopyLimitOrdersParamsStructOutput = [
  string,
  CopyLimitOrderStructOutput,
  CopyLimitOrderStructOutput,
] & {
  copyAddress: string;
  copyLoanOffer: CopyLimitOrderStructOutput;
  copyBorrowOffer: CopyLimitOrderStructOutput;
};

export type CopyLimitOrdersOnBehalfOfParamsStruct = {
  params: CopyLimitOrdersParamsStruct;
  onBehalfOf: string;
};

export type CopyLimitOrdersOnBehalfOfParamsStructOutput = [
  CopyLimitOrdersParamsStructOutput,
  string,
] & { params: CopyLimitOrdersParamsStructOutput; onBehalfOf: string };

export type DataViewStruct = {
  nextDebtPositionId: BigNumberish;
  nextCreditPositionId: BigNumberish;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  collateralToken: string;
  borrowAToken: string;
  debtToken: string;
  variablePool: string;
};

export type DataViewStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
] & {
  nextDebtPositionId: BigNumber;
  nextCreditPositionId: BigNumber;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  collateralToken: string;
  borrowAToken: string;
  debtToken: string;
  variablePool: string;
};

export type DepositParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type DepositParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export type DepositOnBehalfOfParamsStruct = {
  params: DepositParamsStruct;
  onBehalfOf: string;
};

export type DepositOnBehalfOfParamsStructOutput = [
  DepositParamsStructOutput,
  string,
] & { params: DepositParamsStructOutput; onBehalfOf: string };

export type InitializeFeeConfigParamsStruct = {
  swapFeeAPR: BigNumberish;
  fragmentationFee: BigNumberish;
  liquidationRewardPercent: BigNumberish;
  overdueCollateralProtocolPercent: BigNumberish;
  collateralProtocolPercent: BigNumberish;
  feeRecipient: string;
};

export type InitializeFeeConfigParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
] & {
  swapFeeAPR: BigNumber;
  fragmentationFee: BigNumber;
  liquidationRewardPercent: BigNumber;
  overdueCollateralProtocolPercent: BigNumber;
  collateralProtocolPercent: BigNumber;
  feeRecipient: string;
};

export type CreditPositionStruct = {
  lender: string;
  forSale: boolean;
  credit: BigNumberish;
  debtPositionId: BigNumberish;
};

export type CreditPositionStructOutput = [
  string,
  boolean,
  BigNumber,
  BigNumber,
] & {
  lender: string;
  forSale: boolean;
  credit: BigNumber;
  debtPositionId: BigNumber;
};

export type DebtPositionStruct = {
  borrower: string;
  futureValue: BigNumberish;
  dueDate: BigNumberish;
  liquidityIndexAtRepayment: BigNumberish;
};

export type DebtPositionStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  borrower: string;
  futureValue: BigNumber;
  dueDate: BigNumber;
  liquidityIndexAtRepayment: BigNumber;
};

export type SellCreditMarketParamsStruct = {
  lender: string;
  creditPositionId: BigNumberish;
  amount: BigNumberish;
  tenor: BigNumberish;
  deadline: BigNumberish;
  maxAPR: BigNumberish;
  exactAmountIn: boolean;
};

export type SellCreditMarketParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
] & {
  lender: string;
  creditPositionId: BigNumber;
  amount: BigNumber;
  tenor: BigNumber;
  deadline: BigNumber;
  maxAPR: BigNumber;
  exactAmountIn: boolean;
};

export type UserCopyLimitOrdersStruct = {
  copyAddress: string;
  copyLoanOffer: CopyLimitOrderStruct;
  copyBorrowOffer: CopyLimitOrderStruct;
};

export type UserCopyLimitOrdersStructOutput = [
  string,
  CopyLimitOrderStructOutput,
  CopyLimitOrderStructOutput,
] & {
  copyAddress: string;
  copyLoanOffer: CopyLimitOrderStructOutput;
  copyBorrowOffer: CopyLimitOrderStructOutput;
};

export type LimitOrderStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LimitOrderStructOutput = [BigNumber, YieldCurveStructOutput] & {
  maxDueDate: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type UserStruct = {
  loanOffer: LimitOrderStruct;
  borrowOffer: LimitOrderStruct;
  openingLimitBorrowCR: BigNumberish;
  allCreditPositionsForSaleDisabled: boolean;
};

export type UserStructOutput = [
  LimitOrderStructOutput,
  LimitOrderStructOutput,
  BigNumber,
  boolean,
] & {
  loanOffer: LimitOrderStructOutput;
  borrowOffer: LimitOrderStructOutput;
  openingLimitBorrowCR: BigNumber;
  allCreditPositionsForSaleDisabled: boolean;
};

export type UserViewStruct = {
  user: UserStruct;
  account: string;
  collateralTokenBalance: BigNumberish;
  borrowATokenBalance: BigNumberish;
  debtBalance: BigNumberish;
};

export type UserViewStructOutput = [
  UserStructOutput,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  user: UserStructOutput;
  account: string;
  collateralTokenBalance: BigNumber;
  borrowATokenBalance: BigNumber;
  debtBalance: BigNumber;
};

export type InitializeRiskConfigParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  minimumCreditBorrowAToken: BigNumberish;
  borrowATokenCap: BigNumberish;
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
};

export type InitializeRiskConfigParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  minimumCreditBorrowAToken: BigNumber;
  borrowATokenCap: BigNumber;
  minTenor: BigNumber;
  maxTenor: BigNumber;
};

export type InitializeOracleParamsStruct = {
  priceFeed: string;
  variablePoolBorrowRateStaleRateInterval: BigNumberish;
};

export type InitializeOracleParamsStructOutput = [string, BigNumber] & {
  priceFeed: string;
  variablePoolBorrowRateStaleRateInterval: BigNumber;
};

export type InitializeDataParamsStruct = {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
  sizeFactory: string;
};

export type InitializeDataParamsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
] & {
  weth: string;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  borrowATokenV1_5: string;
  sizeFactory: string;
};

export type LiquidateParamsStruct = {
  debtPositionId: BigNumberish;
  minimumCollateralProfit: BigNumberish;
  deadline: BigNumberish;
};

export type LiquidateParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  debtPositionId: BigNumber;
  minimumCollateralProfit: BigNumber;
  deadline: BigNumber;
};

export type LiquidateWithReplacementParamsStruct = {
  debtPositionId: BigNumberish;
  borrower: string;
  minimumCollateralProfit: BigNumberish;
  deadline: BigNumberish;
  minAPR: BigNumberish;
};

export type LiquidateWithReplacementParamsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  debtPositionId: BigNumber;
  borrower: string;
  minimumCollateralProfit: BigNumber;
  deadline: BigNumber;
  minAPR: BigNumber;
};

export type PartialRepayParamsStruct = {
  creditPositionWithDebtToRepayId: BigNumberish;
  amount: BigNumberish;
  borrower: string;
};

export type PartialRepayParamsStructOutput = [BigNumber, BigNumber, string] & {
  creditPositionWithDebtToRepayId: BigNumber;
  amount: BigNumber;
  borrower: string;
};

export type RepayParamsStruct = {
  debtPositionId: BigNumberish;
  borrower: string;
};

export type RepayParamsStructOutput = [BigNumber, string] & {
  debtPositionId: BigNumber;
  borrower: string;
};

export type SelfLiquidateParamsStruct = { creditPositionId: BigNumberish };

export type SelfLiquidateParamsStructOutput = [BigNumber] & {
  creditPositionId: BigNumber;
};

export type SelfLiquidateOnBehalfOfParamsStruct = {
  params: SelfLiquidateParamsStruct;
  onBehalfOf: string;
  recipient: string;
};

export type SelfLiquidateOnBehalfOfParamsStructOutput = [
  SelfLiquidateParamsStructOutput,
  string,
  string,
] & {
  params: SelfLiquidateParamsStructOutput;
  onBehalfOf: string;
  recipient: string;
};

export type SellCreditLimitParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type SellCreditLimitParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput,
] & { maxDueDate: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type SellCreditLimitOnBehalfOfParamsStruct = {
  params: SellCreditLimitParamsStruct;
  onBehalfOf: string;
};

export type SellCreditLimitOnBehalfOfParamsStructOutput = [
  SellCreditLimitParamsStructOutput,
  string,
] & { params: SellCreditLimitParamsStructOutput; onBehalfOf: string };

export type SellCreditMarketOnBehalfOfParamsStruct = {
  params: SellCreditMarketParamsStruct;
  onBehalfOf: string;
  recipient: string;
};

export type SellCreditMarketOnBehalfOfParamsStructOutput = [
  SellCreditMarketParamsStructOutput,
  string,
  string,
] & {
  params: SellCreditMarketParamsStructOutput;
  onBehalfOf: string;
  recipient: string;
};

export type SetUserConfigurationParamsStruct = {
  openingLimitBorrowCR: BigNumberish;
  allCreditPositionsForSaleDisabled: boolean;
  creditPositionIdsForSale: boolean;
  creditPositionIds: BigNumberish[];
};

export type SetUserConfigurationParamsStructOutput = [
  BigNumber,
  boolean,
  boolean,
  BigNumber[],
] & {
  openingLimitBorrowCR: BigNumber;
  allCreditPositionsForSaleDisabled: boolean;
  creditPositionIdsForSale: boolean;
  creditPositionIds: BigNumber[];
};

export type SetUserConfigurationOnBehalfOfParamsStruct = {
  params: SetUserConfigurationParamsStruct;
  onBehalfOf: string;
};

export type SetUserConfigurationOnBehalfOfParamsStructOutput = [
  SetUserConfigurationParamsStructOutput,
  string,
] & { params: SetUserConfigurationParamsStructOutput; onBehalfOf: string };

export type UpdateConfigParamsStruct = { key: string; value: BigNumberish };

export type UpdateConfigParamsStructOutput = [string, BigNumber] & {
  key: string;
  value: BigNumber;
};

export type WithdrawParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type WithdrawParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export type WithdrawOnBehalfOfParamsStruct = {
  params: WithdrawParamsStruct;
  onBehalfOf: string;
};

export type WithdrawOnBehalfOfParamsStructOutput = [
  WithdrawParamsStructOutput,
  string,
] & { params: WithdrawParamsStructOutput; onBehalfOf: string };

export declare namespace BuyCreditMarket {
  export type SwapDataBuyCreditMarketStruct = {
    creditPosition: CreditPositionStruct;
    borrower: string;
    creditAmountOut: BigNumberish;
    cashAmountIn: BigNumberish;
    swapFee: BigNumberish;
    fragmentationFee: BigNumberish;
    tenor: BigNumberish;
  };

  export type SwapDataBuyCreditMarketStructOutput = [
    CreditPositionStructOutput,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    creditPosition: CreditPositionStructOutput;
    borrower: string;
    creditAmountOut: BigNumber;
    cashAmountIn: BigNumber;
    swapFee: BigNumber;
    fragmentationFee: BigNumber;
    tenor: BigNumber;
  };
}

export declare namespace SellCreditMarket {
  export type SwapDataSellCreditMarketStruct = {
    creditPosition: CreditPositionStruct;
    creditAmountIn: BigNumberish;
    cashAmountOut: BigNumberish;
    swapFee: BigNumberish;
    fragmentationFee: BigNumberish;
    tenor: BigNumberish;
  };

  export type SwapDataSellCreditMarketStructOutput = [
    CreditPositionStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    creditPosition: CreditPositionStructOutput;
    creditAmountIn: BigNumber;
    cashAmountOut: BigNumber;
    swapFee: BigNumber;
    fragmentationFee: BigNumber;
    tenor: BigNumber;
  };
}

export interface SizeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "buyCreditLimit((uint256,(uint256[],int256[],uint256[])))": FunctionFragment;
    "buyCreditLimitOnBehalfOf(((uint256,(uint256[],int256[],uint256[])),address))": FunctionFragment;
    "buyCreditMarket((address,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "buyCreditMarketOnBehalfOf(((address,uint256,uint256,uint256,uint256,uint256,bool),address,address))": FunctionFragment;
    "claim((uint256))": FunctionFragment;
    "collateralRatio(address)": FunctionFragment;
    "compensate((uint256,uint256,uint256))": FunctionFragment;
    "compensateOnBehalfOf(((uint256,uint256,uint256),address))": FunctionFragment;
    "copyLimitOrders((address,(uint256,uint256,uint256,uint256,int256),(uint256,uint256,uint256,uint256,int256)))": FunctionFragment;
    "copyLimitOrdersOnBehalfOf(((address,(uint256,uint256,uint256,uint256,int256),(uint256,uint256,uint256,uint256,int256)),address))": FunctionFragment;
    "data()": FunctionFragment;
    "debtTokenAmountToCollateralTokenAmount(uint256)": FunctionFragment;
    "deposit((address,uint256,address))": FunctionFragment;
    "depositOnBehalfOf(((address,uint256,address),address))": FunctionFragment;
    "feeConfig()": FunctionFragment;
    "getBorrowOfferAPR(address,uint256)": FunctionFragment;
    "getBuyCreditMarketSwapData((address,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "getCreditPosition(uint256)": FunctionFragment;
    "getDebtPosition(uint256)": FunctionFragment;
    "getDebtPositionAssignedCollateral(uint256)": FunctionFragment;
    "getLoanOfferAPR(address,uint256)": FunctionFragment;
    "getLoanStatus(uint256)": FunctionFragment;
    "getPositionsCount()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSellCreditMarketSwapData((address,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "getSwapFee(uint256,uint256)": FunctionFragment;
    "getUserCopyLimitOrders(address)": FunctionFragment;
    "getUserView(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint64),(address,address,address,address,address,address))": FunctionFragment;
    "isCreditPositionId(uint256)": FunctionFragment;
    "isDebtPositionId(uint256)": FunctionFragment;
    "isDebtPositionLiquidatable(uint256)": FunctionFragment;
    "liquidate((uint256,uint256,uint256))": FunctionFragment;
    "liquidateWithReplacement((uint256,address,uint256,uint256,uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "oracle()": FunctionFragment;
    "partialRepay((uint256,uint256,address))": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "reinitialize(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repay((uint256,address))": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "riskConfig()": FunctionFragment;
    "selfLiquidate((uint256))": FunctionFragment;
    "selfLiquidateOnBehalfOf(((uint256),address,address))": FunctionFragment;
    "sellCreditLimit((uint256,(uint256[],int256[],uint256[])))": FunctionFragment;
    "sellCreditLimitOnBehalfOf(((uint256,(uint256[],int256[],uint256[])),address))": FunctionFragment;
    "sellCreditMarket((address,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "sellCreditMarketOnBehalfOf(((address,uint256,uint256,uint256,uint256,uint256,bool),address,address))": FunctionFragment;
    "setUserConfiguration((uint256,bool,bool,uint256[]))": FunctionFragment;
    "setUserConfigurationOnBehalfOf(((uint256,bool,bool,uint256[]),address))": FunctionFragment;
    "setVariablePoolBorrowRate(uint128)": FunctionFragment;
    "sizeFactory()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateConfig((string,uint256))": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw((address,uint256,address))": FunctionFragment;
    "withdrawOnBehalfOf(((address,uint256,address),address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "buyCreditLimit"
      | "buyCreditLimitOnBehalfOf"
      | "buyCreditMarket"
      | "buyCreditMarketOnBehalfOf"
      | "claim"
      | "collateralRatio"
      | "compensate"
      | "compensateOnBehalfOf"
      | "copyLimitOrders"
      | "copyLimitOrdersOnBehalfOf"
      | "data"
      | "debtTokenAmountToCollateralTokenAmount"
      | "deposit"
      | "depositOnBehalfOf"
      | "feeConfig"
      | "getBorrowOfferAPR"
      | "getBuyCreditMarketSwapData"
      | "getCreditPosition"
      | "getDebtPosition"
      | "getDebtPositionAssignedCollateral"
      | "getLoanOfferAPR"
      | "getLoanStatus"
      | "getPositionsCount"
      | "getRoleAdmin"
      | "getSellCreditMarketSwapData"
      | "getSwapFee"
      | "getUserCopyLimitOrders"
      | "getUserView"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCreditPositionId"
      | "isDebtPositionId"
      | "isDebtPositionLiquidatable"
      | "liquidate"
      | "liquidateWithReplacement"
      | "multicall"
      | "oracle"
      | "partialRepay"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "reinitialize"
      | "renounceRole"
      | "repay"
      | "revokeRole"
      | "riskConfig"
      | "selfLiquidate"
      | "selfLiquidateOnBehalfOf"
      | "sellCreditLimit"
      | "sellCreditLimitOnBehalfOf"
      | "sellCreditMarket"
      | "sellCreditMarketOnBehalfOf"
      | "setUserConfiguration"
      | "setUserConfigurationOnBehalfOf"
      | "setVariablePoolBorrowRate"
      | "sizeFactory"
      | "supportsInterface"
      | "unpause"
      | "updateConfig"
      | "upgradeToAndCall"
      | "version"
      | "withdraw"
      | "withdrawOnBehalfOf",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditLimit",
    values: [BuyCreditLimitParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditLimitOnBehalfOf",
    values: [BuyCreditLimitOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditMarket",
    values: [BuyCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "buyCreditMarketOnBehalfOf",
    values: [BuyCreditMarketOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [ClaimParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [CompensateParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "compensateOnBehalfOf",
    values: [CompensateOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "copyLimitOrders",
    values: [CopyLimitOrdersParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "copyLimitOrdersOnBehalfOf",
    values: [CopyLimitOrdersOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtTokenAmountToCollateralTokenAmount",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnBehalfOf",
    values: [DepositOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowOfferAPR",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyCreditMarketSwapData",
    values: [BuyCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPosition",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPosition",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPositionAssignedCollateral",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanOfferAPR",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanStatus",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getSellCreditMarketSwapData",
    values: [SellCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCopyLimitOrders",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "getUserView", values: [string]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      InitializeFeeConfigParamsStruct,
      InitializeRiskConfigParamsStruct,
      InitializeOracleParamsStruct,
      InitializeDataParamsStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditPositionId",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionId",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionLiquidatable",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [LiquidateParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateWithReplacement",
    values: [LiquidateWithReplacementParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialRepay",
    values: [PartialRepayParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [RepayParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "riskConfig",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidate",
    values: [SelfLiquidateParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidateOnBehalfOf",
    values: [SelfLiquidateOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditLimit",
    values: [SellCreditLimitParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditLimitOnBehalfOf",
    values: [SellCreditLimitOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditMarket",
    values: [SellCreditMarketParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "sellCreditMarketOnBehalfOf",
    values: [SellCreditMarketOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "setUserConfiguration",
    values: [SetUserConfigurationParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "setUserConfigurationOnBehalfOf",
    values: [SetUserConfigurationOnBehalfOfParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "setVariablePoolBorrowRate",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "sizeFactory",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [UpdateConfigParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOnBehalfOf",
    values: [WithdrawOnBehalfOfParamsStruct],
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditLimitOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCreditMarketOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compensateOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "copyLimitOrders",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "copyLimitOrdersOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenAmountToCollateralTokenAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyCreditMarketSwapData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPosition",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPosition",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPositionAssignedCollateral",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanStatus",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellCreditMarketSwapData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserCopyLimitOrders",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserView",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCreditPositionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionLiquidatable",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateWithReplacement",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialRepay",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidateOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditLimitOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCreditMarketOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserConfiguration",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserConfigurationOnBehalfOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariablePoolBorrowRate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOnBehalfOf",
    data: BytesLike,
  ): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VariablePoolBorrowRateUpdated(address,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VariablePoolBorrowRateUpdated",
  ): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VariablePoolBorrowRateUpdatedEventObject {
  sender: string;
  oldBorrowRate: BigNumber;
  newBorrowRate: BigNumber;
}
export type VariablePoolBorrowRateUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VariablePoolBorrowRateUpdatedEventObject
>;

export type VariablePoolBorrowRateUpdatedEventFilter =
  TypedEventFilter<VariablePoolBorrowRateUpdatedEvent>;

export interface Size extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SizeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    buyCreditLimit(
      params: BuyCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    buyCreditLimitOnBehalfOf(
      externalParams: BuyCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    buyCreditMarket(
      params: BuyCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    buyCreditMarketOnBehalfOf(
      externalParams: BuyCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    compensateOnBehalfOf(
      externalParams: CompensateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    copyLimitOrders(
      params: CopyLimitOrdersParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    copyLimitOrdersOnBehalfOf(
      externalParams: CopyLimitOrdersOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<[DataViewStructOutput]>;

    debtTokenAmountToCollateralTokenAmount(
      borrowATokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    deposit(
      params: DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    depositOnBehalfOf(
      params: DepositOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    feeConfig(
      overrides?: CallOverrides,
    ): Promise<[InitializeFeeConfigParamsStructOutput]>;

    getBorrowOfferAPR(
      borrower: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getBuyCreditMarketSwapData(
      params: BuyCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BuyCreditMarket.SwapDataBuyCreditMarketStructOutput]>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[CreditPositionStructOutput]>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[DebtPositionStructOutput]>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLoanOfferAPR(
      lender: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    getPositionsCount(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSellCreditMarketSwapData(
      params: SellCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[SellCreditMarket.SwapDataSellCreditMarketStructOutput]>;

    getSwapFee(
      cash: BigNumberish,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserCopyLimitOrders(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[UserCopyLimitOrdersStructOutput]>;

    getUserView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[UserViewStructOutput]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      owner: string,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    multicall(
      _data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    oracle(
      overrides?: CallOverrides,
    ): Promise<[InitializeOracleParamsStructOutput]>;

    partialRepay(
      params: PartialRepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    reinitialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    riskConfig(
      overrides?: CallOverrides,
    ): Promise<[InitializeRiskConfigParamsStructOutput]>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    selfLiquidateOnBehalfOf(
      externalParams: SelfLiquidateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sellCreditLimit(
      params: SellCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sellCreditLimitOnBehalfOf(
      externalParams: SellCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sellCreditMarket(
      params: SellCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sellCreditMarketOnBehalfOf(
      externalParams: SellCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    setUserConfiguration(
      params: SetUserConfigurationParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    setUserConfigurationOnBehalfOf(
      externalParams: SetUserConfigurationOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    setVariablePoolBorrowRate(
      borrowRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    sizeFactory(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdrawOnBehalfOf(
      externalParams: WithdrawOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  buyCreditLimit(
    params: BuyCreditLimitParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  buyCreditLimitOnBehalfOf(
    externalParams: BuyCreditLimitOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  buyCreditMarket(
    params: BuyCreditMarketParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  buyCreditMarketOnBehalfOf(
    externalParams: BuyCreditMarketOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  claim(
    params: ClaimParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  collateralRatio(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  compensate(
    params: CompensateParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  compensateOnBehalfOf(
    externalParams: CompensateOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  copyLimitOrders(
    params: CopyLimitOrdersParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  copyLimitOrdersOnBehalfOf(
    externalParams: CopyLimitOrdersOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<DataViewStructOutput>;

  debtTokenAmountToCollateralTokenAmount(
    borrowATokenAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  deposit(
    params: DepositParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  depositOnBehalfOf(
    params: DepositOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  feeConfig(
    overrides?: CallOverrides,
  ): Promise<InitializeFeeConfigParamsStructOutput>;

  getBorrowOfferAPR(
    borrower: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getBuyCreditMarketSwapData(
    params: BuyCreditMarketParamsStruct,
    overrides?: CallOverrides,
  ): Promise<BuyCreditMarket.SwapDataBuyCreditMarketStructOutput>;

  getCreditPosition(
    creditPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<CreditPositionStructOutput>;

  getDebtPosition(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<DebtPositionStructOutput>;

  getDebtPositionAssignedCollateral(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLoanOfferAPR(
    lender: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLoanStatus(
    positionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  getPositionsCount(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSellCreditMarketSwapData(
    params: SellCreditMarketParamsStruct,
    overrides?: CallOverrides,
  ): Promise<SellCreditMarket.SwapDataSellCreditMarketStructOutput>;

  getSwapFee(
    cash: BigNumberish,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserCopyLimitOrders(
    user: string,
    overrides?: CallOverrides,
  ): Promise<UserCopyLimitOrdersStructOutput>;

  getUserView(
    user: string,
    overrides?: CallOverrides,
  ): Promise<UserViewStructOutput>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    owner: string,
    f: InitializeFeeConfigParamsStruct,
    r: InitializeRiskConfigParamsStruct,
    o: InitializeOracleParamsStruct,
    d: InitializeDataParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isCreditPositionId(
    creditPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isDebtPositionId(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isDebtPositionLiquidatable(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  liquidate(
    params: LiquidateParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  liquidateWithReplacement(
    params: LiquidateWithReplacementParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  multicall(
    _data: BytesLike[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  oracle(
    overrides?: CallOverrides,
  ): Promise<InitializeOracleParamsStructOutput>;

  partialRepay(
    params: PartialRepayParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  reinitialize(
    _sizeFactory: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  repay(
    params: RepayParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  riskConfig(
    overrides?: CallOverrides,
  ): Promise<InitializeRiskConfigParamsStructOutput>;

  selfLiquidate(
    params: SelfLiquidateParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  selfLiquidateOnBehalfOf(
    externalParams: SelfLiquidateOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sellCreditLimit(
    params: SellCreditLimitParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sellCreditLimitOnBehalfOf(
    externalParams: SellCreditLimitOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sellCreditMarket(
    params: SellCreditMarketParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sellCreditMarketOnBehalfOf(
    externalParams: SellCreditMarketOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  setUserConfiguration(
    params: SetUserConfigurationParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  setUserConfigurationOnBehalfOf(
    externalParams: SetUserConfigurationOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  setVariablePoolBorrowRate(
    borrowRate: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  sizeFactory(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateConfig(
    params: UpdateConfigParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    params: WithdrawParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdrawOnBehalfOf(
    externalParams: WithdrawOnBehalfOfParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    buyCreditLimit(
      params: BuyCreditLimitParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    buyCreditLimitOnBehalfOf(
      externalParams: BuyCreditLimitOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    buyCreditMarket(
      params: BuyCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    buyCreditMarketOnBehalfOf(
      externalParams: BuyCreditMarketOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    claim(params: ClaimParamsStruct, overrides?: CallOverrides): Promise<void>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    compensateOnBehalfOf(
      externalParams: CompensateOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    copyLimitOrders(
      params: CopyLimitOrdersParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    copyLimitOrdersOnBehalfOf(
      externalParams: CopyLimitOrdersOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    data(overrides?: CallOverrides): Promise<DataViewStructOutput>;

    debtTokenAmountToCollateralTokenAmount(
      borrowATokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositOnBehalfOf(
      params: DepositOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    feeConfig(
      overrides?: CallOverrides,
    ): Promise<InitializeFeeConfigParamsStructOutput>;

    getBorrowOfferAPR(
      borrower: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBuyCreditMarketSwapData(
      params: BuyCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BuyCreditMarket.SwapDataBuyCreditMarketStructOutput>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<CreditPositionStructOutput>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<DebtPositionStructOutput>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanOfferAPR(
      lender: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    getPositionsCount(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSellCreditMarketSwapData(
      params: SellCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<SellCreditMarket.SwapDataSellCreditMarketStructOutput>;

    getSwapFee(
      cash: BigNumberish,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserCopyLimitOrders(
      user: string,
      overrides?: CallOverrides,
    ): Promise<UserCopyLimitOrdersStructOutput>;

    getUserView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<UserViewStructOutput>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      owner: string,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatorProfitCollateralToken: BigNumber;
        liquidatorProfitBorrowToken: BigNumber;
      }
    >;

    multicall(_data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    oracle(
      overrides?: CallOverrides,
    ): Promise<InitializeOracleParamsStructOutput>;

    partialRepay(
      params: PartialRepayParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    reinitialize(
      _sizeFactory: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    repay(params: RepayParamsStruct, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    riskConfig(
      overrides?: CallOverrides,
    ): Promise<InitializeRiskConfigParamsStructOutput>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    selfLiquidateOnBehalfOf(
      externalParams: SelfLiquidateOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    sellCreditLimit(
      params: SellCreditLimitParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    sellCreditLimitOnBehalfOf(
      externalParams: SellCreditLimitOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    sellCreditMarket(
      params: SellCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    sellCreditMarketOnBehalfOf(
      externalParams: SellCreditMarketOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserConfiguration(
      params: SetUserConfigurationParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserConfigurationOnBehalfOf(
      externalParams: SetUserConfigurationOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVariablePoolBorrowRate(
      borrowRate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    sizeFactory(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawOnBehalfOf(
      externalParams: WithdrawOnBehalfOfParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "VariablePoolBorrowRateUpdated(address,uint128,uint128)"(
      sender?: string | null,
      oldBorrowRate?: null,
      newBorrowRate?: null,
    ): VariablePoolBorrowRateUpdatedEventFilter;
    VariablePoolBorrowRateUpdated(
      sender?: string | null,
      oldBorrowRate?: null,
      newBorrowRate?: null,
    ): VariablePoolBorrowRateUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    buyCreditLimit(
      params: BuyCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    buyCreditLimitOnBehalfOf(
      externalParams: BuyCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    buyCreditMarket(
      params: BuyCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    buyCreditMarketOnBehalfOf(
      externalParams: BuyCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    claim(
      params: ClaimParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    compensateOnBehalfOf(
      externalParams: CompensateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    copyLimitOrders(
      params: CopyLimitOrdersParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    copyLimitOrdersOnBehalfOf(
      externalParams: CopyLimitOrdersOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    debtTokenAmountToCollateralTokenAmount(
      borrowATokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    depositOnBehalfOf(
      params: DepositOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    feeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowOfferAPR(
      borrower: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBuyCreditMarketSwapData(
      params: BuyCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanOfferAPR(
      lender: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSellCreditMarketSwapData(
      params: SellCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapFee(
      cash: BigNumberish,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserCopyLimitOrders(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    multicall(
      _data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    partialRepay(
      params: PartialRepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    reinitialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    repay(
      params: RepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    riskConfig(overrides?: CallOverrides): Promise<BigNumber>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    selfLiquidateOnBehalfOf(
      externalParams: SelfLiquidateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sellCreditLimit(
      params: SellCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sellCreditLimitOnBehalfOf(
      externalParams: SellCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sellCreditMarket(
      params: SellCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sellCreditMarketOnBehalfOf(
      externalParams: SellCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    setUserConfiguration(
      params: SetUserConfigurationParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    setUserConfigurationOnBehalfOf(
      externalParams: SetUserConfigurationOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    setVariablePoolBorrowRate(
      borrowRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    sizeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    withdrawOnBehalfOf(
      externalParams: WithdrawOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    buyCreditLimit(
      params: BuyCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    buyCreditLimitOnBehalfOf(
      externalParams: BuyCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    buyCreditMarket(
      params: BuyCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    buyCreditMarketOnBehalfOf(
      externalParams: BuyCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    compensateOnBehalfOf(
      externalParams: CompensateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    copyLimitOrders(
      params: CopyLimitOrdersParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    copyLimitOrdersOnBehalfOf(
      externalParams: CopyLimitOrdersOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtTokenAmountToCollateralTokenAmount(
      borrowATokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      params: DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    depositOnBehalfOf(
      params: DepositOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    feeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowOfferAPR(
      borrower: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBuyCreditMarketSwapData(
      params: BuyCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanOfferAPR(
      lender: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSellCreditMarketSwapData(
      params: SellCreditMarketParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapFee(
      cash: BigNumberish,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserCopyLimitOrders(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      f: InitializeFeeConfigParamsStruct,
      r: InitializeRiskConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    multicall(
      _data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialRepay(
      params: PartialRepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinitialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    riskConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    selfLiquidateOnBehalfOf(
      externalParams: SelfLiquidateOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sellCreditLimit(
      params: SellCreditLimitParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sellCreditLimitOnBehalfOf(
      externalParams: SellCreditLimitOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sellCreditMarket(
      params: SellCreditMarketParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sellCreditMarketOnBehalfOf(
      externalParams: SellCreditMarketOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setUserConfiguration(
      params: SetUserConfigurationParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setUserConfigurationOnBehalfOf(
      externalParams: SetUserConfigurationOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setVariablePoolBorrowRate(
      borrowRate: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sizeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdrawOnBehalfOf(
      externalParams: WithdrawOnBehalfOfParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
