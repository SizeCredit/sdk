/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BuyCreditLimit(address,address,uint256,uint256[],int256[],uint256[])": EventFragment;
    "BuyCreditMarket(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "Compensate(address,address,uint256,uint256,uint256)": EventFragment;
    "CreateCreditPosition(uint256,address,uint256,uint256,uint256,bool)": EventFragment;
    "CreateDebtPosition(uint256,address,address,uint256,uint256)": EventFragment;
    "Deposit(address,address,address,address,uint256)": EventFragment;
    "Initialize(address)": EventFragment;
    "Liquidate(address,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "LiquidateWithReplacement(address,uint256,address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "PartialRepay(address,uint256,uint256,address)": EventFragment;
    "Repay(address,uint256,address)": EventFragment;
    "SelfLiquidate(address,address,uint256,address)": EventFragment;
    "SellCreditLimit(address,address,uint256,uint256[],int256[],uint256[])": EventFragment;
    "SellCreditMarket(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "SetCopyLimitOrderConfigs(address,address,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,int256)": EventFragment;
    "SetUserConfiguration(address,address,uint256,bool,bool,uint256[])": EventFragment;
    "SetVault(address,address,address,bool)": EventFragment;
    "SwapData(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateConfig(address,string,uint256)": EventFragment;
    "UpdateCreditPosition(uint256,address,uint256,bool)": EventFragment;
    "UpdateDebtPosition(uint256,address,uint256,uint256)": EventFragment;
    "VariablePoolBorrowRateUpdated(address,uint128,uint128)": EventFragment;
    "Withdraw(address,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyCreditLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyCreditMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compensate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateCreditPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDebtPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateWithReplacement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelfLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellCreditLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellCreditMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCopyLimitOrderConfigs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUserConfiguration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCreditPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDebtPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VariablePoolBorrowRateUpdated",
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BuyCreditLimitEventObject {
  sender: string;
  onBehalfOf: string;
  maxDueDate: BigNumber;
  curveRelativeTimeTenors: BigNumber[];
  curveRelativeTimeAprs: BigNumber[];
  curveRelativeTimeMarketRateMultipliers: BigNumber[];
}
export type BuyCreditLimitEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber[], BigNumber[]],
  BuyCreditLimitEventObject
>;

export type BuyCreditLimitEventFilter = TypedEventFilter<BuyCreditLimitEvent>;

export interface BuyCreditMarketEventObject {
  sender: string;
  lender: string;
  borrower: string;
  recipient: string;
  creditPositionId: BigNumber;
  amount: BigNumber;
  tenor: BigNumber;
  deadline: BigNumber;
  minAPR: BigNumber;
  exactAmountIn: boolean;
  collectionId: BigNumber;
  rateProvider: string;
}
export type BuyCreditMarketEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
  ],
  BuyCreditMarketEventObject
>;

export type BuyCreditMarketEventFilter = TypedEventFilter<BuyCreditMarketEvent>;

export interface ClaimEventObject {
  sender: string;
  creditPositionId: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface CompensateEventObject {
  sender: string;
  onBehalfOf: string;
  creditPositionWithDebtToRepayId: BigNumber;
  creditPositionToCompensateId: BigNumber;
  amount: BigNumber;
}
export type CompensateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  CompensateEventObject
>;

export type CompensateEventFilter = TypedEventFilter<CompensateEvent>;

export interface CreateCreditPositionEventObject {
  creditPositionId: BigNumber;
  lender: string;
  debtPositionId: BigNumber;
  exitPositionId: BigNumber;
  credit: BigNumber;
  forSale: boolean;
}
export type CreateCreditPositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean],
  CreateCreditPositionEventObject
>;

export type CreateCreditPositionEventFilter =
  TypedEventFilter<CreateCreditPositionEvent>;

export interface CreateDebtPositionEventObject {
  debtPositionId: BigNumber;
  borrower: string;
  lender: string;
  futureValue: BigNumber;
  dueDate: BigNumber;
}
export type CreateDebtPositionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  CreateDebtPositionEventObject
>;

export type CreateDebtPositionEventFilter =
  TypedEventFilter<CreateDebtPositionEvent>;

export interface DepositEventObject {
  sender: string;
  onBehalfOf: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializeEventObject {
  sender: string;
}
export type InitializeEvent = TypedEvent<[string], InitializeEventObject>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface LiquidateEventObject {
  sender: string;
  debtPositionId: BigNumber;
  minimumCollateralProfit: BigNumber;
  deadline: BigNumber;
  collateralRatio: BigNumber;
  loanStatus: number;
}
export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface LiquidateWithReplacementEventObject {
  sender: string;
  debtPositionId: BigNumber;
  borrower: string;
  minimumCollateralProfit: BigNumber;
  deadline: BigNumber;
  minAPR: BigNumber;
  collectionId: BigNumber;
  rateProvider: string;
}
export type LiquidateWithReplacementEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  LiquidateWithReplacementEventObject
>;

export type LiquidateWithReplacementEventFilter =
  TypedEventFilter<LiquidateWithReplacementEvent>;

export interface PartialRepayEventObject {
  sender: string;
  creditPositionWithDebtToRepayId: BigNumber;
  amount: BigNumber;
  borrower: string;
}
export type PartialRepayEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  PartialRepayEventObject
>;

export type PartialRepayEventFilter = TypedEventFilter<PartialRepayEvent>;

export interface RepayEventObject {
  sender: string;
  debtPositionId: BigNumber;
  borrower: string;
}
export type RepayEvent = TypedEvent<
  [string, BigNumber, string],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface SelfLiquidateEventObject {
  sender: string;
  lender: string;
  creditPositionId: BigNumber;
  recipient: string;
}
export type SelfLiquidateEvent = TypedEvent<
  [string, string, BigNumber, string],
  SelfLiquidateEventObject
>;

export type SelfLiquidateEventFilter = TypedEventFilter<SelfLiquidateEvent>;

export interface SellCreditLimitEventObject {
  sender: string;
  onBehalfOf: string;
  maxDueDate: BigNumber;
  curveRelativeTimeTenors: BigNumber[];
  curveRelativeTimeAprs: BigNumber[];
  curveRelativeTimeMarketRateMultipliers: BigNumber[];
}
export type SellCreditLimitEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber[], BigNumber[]],
  SellCreditLimitEventObject
>;

export type SellCreditLimitEventFilter = TypedEventFilter<SellCreditLimitEvent>;

export interface SellCreditMarketEventObject {
  sender: string;
  borrower: string;
  lender: string;
  recipient: string;
  creditPositionId: BigNumber;
  amount: BigNumber;
  tenor: BigNumber;
  deadline: BigNumber;
  maxAPR: BigNumber;
  exactAmountIn: boolean;
  collectionId: BigNumber;
  rateProvider: string;
}
export type SellCreditMarketEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
  ],
  SellCreditMarketEventObject
>;

export type SellCreditMarketEventFilter =
  TypedEventFilter<SellCreditMarketEvent>;

export interface SetCopyLimitOrderConfigsEventObject {
  sender: string;
  onBehalfOf: string;
  minTenorLoanOffer: BigNumber;
  maxTenorLoanOffer: BigNumber;
  minAPRLoanOffer: BigNumber;
  maxAPRLoanOffer: BigNumber;
  offsetAPRLoanOffer: BigNumber;
  minTenorBorrowOffer: BigNumber;
  maxTenorBorrowOffer: BigNumber;
  minAPRBorrowOffer: BigNumber;
  maxAPRBorrowOffer: BigNumber;
  offsetAPRBorrowOffer: BigNumber;
}
export type SetCopyLimitOrderConfigsEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ],
  SetCopyLimitOrderConfigsEventObject
>;

export type SetCopyLimitOrderConfigsEventFilter =
  TypedEventFilter<SetCopyLimitOrderConfigsEvent>;

export interface SetUserConfigurationEventObject {
  sender: string;
  onBehalfOf: string;
  openingLimitBorrowCR: BigNumber;
  allCreditPositionsForSaleDisabled: boolean;
  creditPositionIdsForSale: boolean;
  creditPositionIds: BigNumber[];
}
export type SetUserConfigurationEvent = TypedEvent<
  [string, string, BigNumber, boolean, boolean, BigNumber[]],
  SetUserConfigurationEventObject
>;

export type SetUserConfigurationEventFilter =
  TypedEventFilter<SetUserConfigurationEvent>;

export interface SetVaultEventObject {
  sender: string;
  onBehalfOf: string;
  vault: string;
  forfeitOldShares: boolean;
}
export type SetVaultEvent = TypedEvent<
  [string, string, string, boolean],
  SetVaultEventObject
>;

export type SetVaultEventFilter = TypedEventFilter<SetVaultEvent>;

export interface SwapDataEventObject {
  creditPositionId: BigNumber;
  borrower: string;
  lender: string;
  credit: BigNumber;
  cashIn: BigNumber;
  cashOut: BigNumber;
  swapFee: BigNumber;
  fragmentationFee: BigNumber;
  tenor: BigNumber;
}
export type SwapDataEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ],
  SwapDataEventObject
>;

export type SwapDataEventFilter = TypedEventFilter<SwapDataEvent>;

export interface UpdateConfigEventObject {
  sender: string;
  key: string;
  value: BigNumber;
}
export type UpdateConfigEvent = TypedEvent<
  [string, string, BigNumber],
  UpdateConfigEventObject
>;

export type UpdateConfigEventFilter = TypedEventFilter<UpdateConfigEvent>;

export interface UpdateCreditPositionEventObject {
  creditPositionId: BigNumber;
  lender: string;
  credit: BigNumber;
  forSale: boolean;
}
export type UpdateCreditPositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  UpdateCreditPositionEventObject
>;

export type UpdateCreditPositionEventFilter =
  TypedEventFilter<UpdateCreditPositionEvent>;

export interface UpdateDebtPositionEventObject {
  debtPositionId: BigNumber;
  borrower: string;
  futureValue: BigNumber;
  liquidityIndexAtRepayment: BigNumber;
}
export type UpdateDebtPositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  UpdateDebtPositionEventObject
>;

export type UpdateDebtPositionEventFilter =
  TypedEventFilter<UpdateDebtPositionEvent>;

export interface VariablePoolBorrowRateUpdatedEventObject {
  sender: string;
  oldBorrowRate: BigNumber;
  newBorrowRate: BigNumber;
}
export type VariablePoolBorrowRateUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VariablePoolBorrowRateUpdatedEventObject
>;

export type VariablePoolBorrowRateUpdatedEventFilter =
  TypedEventFilter<VariablePoolBorrowRateUpdatedEvent>;

export interface WithdrawEventObject {
  sender: string;
  onBehalfOf: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BuyCreditLimit(address,address,uint256,uint256[],int256[],uint256[])"(
      sender?: string | null,
      onBehalfOf?: string | null,
      maxDueDate?: null,
      curveRelativeTimeTenors?: null,
      curveRelativeTimeAprs?: null,
      curveRelativeTimeMarketRateMultipliers?: null,
    ): BuyCreditLimitEventFilter;
    BuyCreditLimit(
      sender?: string | null,
      onBehalfOf?: string | null,
      maxDueDate?: null,
      curveRelativeTimeTenors?: null,
      curveRelativeTimeAprs?: null,
      curveRelativeTimeMarketRateMultipliers?: null,
    ): BuyCreditLimitEventFilter;

    "BuyCreditMarket(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,address)"(
      sender?: string | null,
      lender?: string | null,
      borrower?: string | null,
      recipient?: null,
      creditPositionId?: null,
      amount?: null,
      tenor?: null,
      deadline?: null,
      minAPR?: null,
      exactAmountIn?: null,
      collectionId?: null,
      rateProvider?: null,
    ): BuyCreditMarketEventFilter;
    BuyCreditMarket(
      sender?: string | null,
      lender?: string | null,
      borrower?: string | null,
      recipient?: null,
      creditPositionId?: null,
      amount?: null,
      tenor?: null,
      deadline?: null,
      minAPR?: null,
      exactAmountIn?: null,
      collectionId?: null,
      rateProvider?: null,
    ): BuyCreditMarketEventFilter;

    "Claim(address,uint256)"(
      sender?: string | null,
      creditPositionId?: BigNumberish | null,
    ): ClaimEventFilter;
    Claim(
      sender?: string | null,
      creditPositionId?: BigNumberish | null,
    ): ClaimEventFilter;

    "Compensate(address,address,uint256,uint256,uint256)"(
      sender?: string | null,
      onBehalfOf?: string | null,
      creditPositionWithDebtToRepayId?: BigNumberish | null,
      creditPositionToCompensateId?: null,
      amount?: null,
    ): CompensateEventFilter;
    Compensate(
      sender?: string | null,
      onBehalfOf?: string | null,
      creditPositionWithDebtToRepayId?: BigNumberish | null,
      creditPositionToCompensateId?: null,
      amount?: null,
    ): CompensateEventFilter;

    "CreateCreditPosition(uint256,address,uint256,uint256,uint256,bool)"(
      creditPositionId?: BigNumberish | null,
      lender?: string | null,
      debtPositionId?: BigNumberish | null,
      exitPositionId?: null,
      credit?: null,
      forSale?: null,
    ): CreateCreditPositionEventFilter;
    CreateCreditPosition(
      creditPositionId?: BigNumberish | null,
      lender?: string | null,
      debtPositionId?: BigNumberish | null,
      exitPositionId?: null,
      credit?: null,
      forSale?: null,
    ): CreateCreditPositionEventFilter;

    "CreateDebtPosition(uint256,address,address,uint256,uint256)"(
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      lender?: string | null,
      futureValue?: null,
      dueDate?: null,
    ): CreateDebtPositionEventFilter;
    CreateDebtPosition(
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      lender?: string | null,
      futureValue?: null,
      dueDate?: null,
    ): CreateDebtPositionEventFilter;

    "Deposit(address,address,address,address,uint256)"(
      sender?: string | null,
      onBehalfOf?: string | null,
      token?: string | null,
      to?: null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      onBehalfOf?: string | null,
      token?: string | null,
      to?: null,
      amount?: null,
    ): DepositEventFilter;

    "Initialize(address)"(sender?: string | null): InitializeEventFilter;
    Initialize(sender?: string | null): InitializeEventFilter;

    "Liquidate(address,uint256,uint256,uint256,uint256,uint8)"(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      minimumCollateralProfit?: null,
      deadline?: null,
      collateralRatio?: null,
      loanStatus?: null,
    ): LiquidateEventFilter;
    Liquidate(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      minimumCollateralProfit?: null,
      deadline?: null,
      collateralRatio?: null,
      loanStatus?: null,
    ): LiquidateEventFilter;

    "LiquidateWithReplacement(address,uint256,address,uint256,uint256,uint256,uint256,address)"(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      minimumCollateralProfit?: null,
      deadline?: null,
      minAPR?: null,
      collectionId?: null,
      rateProvider?: null,
    ): LiquidateWithReplacementEventFilter;
    LiquidateWithReplacement(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      minimumCollateralProfit?: null,
      deadline?: null,
      minAPR?: null,
      collectionId?: null,
      rateProvider?: null,
    ): LiquidateWithReplacementEventFilter;

    "PartialRepay(address,uint256,uint256,address)"(
      sender?: string | null,
      creditPositionWithDebtToRepayId?: BigNumberish | null,
      amount?: null,
      borrower?: null,
    ): PartialRepayEventFilter;
    PartialRepay(
      sender?: string | null,
      creditPositionWithDebtToRepayId?: BigNumberish | null,
      amount?: null,
      borrower?: null,
    ): PartialRepayEventFilter;

    "Repay(address,uint256,address)"(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
    ): RepayEventFilter;
    Repay(
      sender?: string | null,
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
    ): RepayEventFilter;

    "SelfLiquidate(address,address,uint256,address)"(
      sender?: string | null,
      lender?: string | null,
      creditPositionId?: BigNumberish | null,
      recipient?: null,
    ): SelfLiquidateEventFilter;
    SelfLiquidate(
      sender?: string | null,
      lender?: string | null,
      creditPositionId?: BigNumberish | null,
      recipient?: null,
    ): SelfLiquidateEventFilter;

    "SellCreditLimit(address,address,uint256,uint256[],int256[],uint256[])"(
      sender?: string | null,
      onBehalfOf?: string | null,
      maxDueDate?: null,
      curveRelativeTimeTenors?: null,
      curveRelativeTimeAprs?: null,
      curveRelativeTimeMarketRateMultipliers?: null,
    ): SellCreditLimitEventFilter;
    SellCreditLimit(
      sender?: string | null,
      onBehalfOf?: string | null,
      maxDueDate?: null,
      curveRelativeTimeTenors?: null,
      curveRelativeTimeAprs?: null,
      curveRelativeTimeMarketRateMultipliers?: null,
    ): SellCreditLimitEventFilter;

    "SellCreditMarket(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,address)"(
      sender?: string | null,
      borrower?: string | null,
      lender?: string | null,
      recipient?: null,
      creditPositionId?: null,
      amount?: null,
      tenor?: null,
      deadline?: null,
      maxAPR?: null,
      exactAmountIn?: null,
      collectionId?: null,
      rateProvider?: null,
    ): SellCreditMarketEventFilter;
    SellCreditMarket(
      sender?: string | null,
      borrower?: string | null,
      lender?: string | null,
      recipient?: null,
      creditPositionId?: null,
      amount?: null,
      tenor?: null,
      deadline?: null,
      maxAPR?: null,
      exactAmountIn?: null,
      collectionId?: null,
      rateProvider?: null,
    ): SellCreditMarketEventFilter;

    "SetCopyLimitOrderConfigs(address,address,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,int256)"(
      sender?: string | null,
      onBehalfOf?: string | null,
      minTenorLoanOffer?: null,
      maxTenorLoanOffer?: null,
      minAPRLoanOffer?: null,
      maxAPRLoanOffer?: null,
      offsetAPRLoanOffer?: null,
      minTenorBorrowOffer?: null,
      maxTenorBorrowOffer?: null,
      minAPRBorrowOffer?: null,
      maxAPRBorrowOffer?: null,
      offsetAPRBorrowOffer?: null,
    ): SetCopyLimitOrderConfigsEventFilter;
    SetCopyLimitOrderConfigs(
      sender?: string | null,
      onBehalfOf?: string | null,
      minTenorLoanOffer?: null,
      maxTenorLoanOffer?: null,
      minAPRLoanOffer?: null,
      maxAPRLoanOffer?: null,
      offsetAPRLoanOffer?: null,
      minTenorBorrowOffer?: null,
      maxTenorBorrowOffer?: null,
      minAPRBorrowOffer?: null,
      maxAPRBorrowOffer?: null,
      offsetAPRBorrowOffer?: null,
    ): SetCopyLimitOrderConfigsEventFilter;

    "SetUserConfiguration(address,address,uint256,bool,bool,uint256[])"(
      sender?: string | null,
      onBehalfOf?: string | null,
      openingLimitBorrowCR?: null,
      allCreditPositionsForSaleDisabled?: null,
      creditPositionIdsForSale?: null,
      creditPositionIds?: null,
    ): SetUserConfigurationEventFilter;
    SetUserConfiguration(
      sender?: string | null,
      onBehalfOf?: string | null,
      openingLimitBorrowCR?: null,
      allCreditPositionsForSaleDisabled?: null,
      creditPositionIdsForSale?: null,
      creditPositionIds?: null,
    ): SetUserConfigurationEventFilter;

    "SetVault(address,address,address,bool)"(
      sender?: string | null,
      onBehalfOf?: string | null,
      vault?: string | null,
      forfeitOldShares?: null,
    ): SetVaultEventFilter;
    SetVault(
      sender?: string | null,
      onBehalfOf?: string | null,
      vault?: string | null,
      forfeitOldShares?: null,
    ): SetVaultEventFilter;

    "SwapData(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      creditPositionId?: BigNumberish | null,
      borrower?: string | null,
      lender?: string | null,
      credit?: null,
      cashIn?: null,
      cashOut?: null,
      swapFee?: null,
      fragmentationFee?: null,
      tenor?: null,
    ): SwapDataEventFilter;
    SwapData(
      creditPositionId?: BigNumberish | null,
      borrower?: string | null,
      lender?: string | null,
      credit?: null,
      cashIn?: null,
      cashOut?: null,
      swapFee?: null,
      fragmentationFee?: null,
      tenor?: null,
    ): SwapDataEventFilter;

    "UpdateConfig(address,string,uint256)"(
      sender?: string | null,
      key?: string | null,
      value?: null,
    ): UpdateConfigEventFilter;
    UpdateConfig(
      sender?: string | null,
      key?: string | null,
      value?: null,
    ): UpdateConfigEventFilter;

    "UpdateCreditPosition(uint256,address,uint256,bool)"(
      creditPositionId?: BigNumberish | null,
      lender?: string | null,
      credit?: null,
      forSale?: null,
    ): UpdateCreditPositionEventFilter;
    UpdateCreditPosition(
      creditPositionId?: BigNumberish | null,
      lender?: string | null,
      credit?: null,
      forSale?: null,
    ): UpdateCreditPositionEventFilter;

    "UpdateDebtPosition(uint256,address,uint256,uint256)"(
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      futureValue?: null,
      liquidityIndexAtRepayment?: null,
    ): UpdateDebtPositionEventFilter;
    UpdateDebtPosition(
      debtPositionId?: BigNumberish | null,
      borrower?: string | null,
      futureValue?: null,
      liquidityIndexAtRepayment?: null,
    ): UpdateDebtPositionEventFilter;

    "VariablePoolBorrowRateUpdated(address,uint128,uint128)"(
      sender?: string | null,
      oldBorrowRate?: null,
      newBorrowRate?: null,
    ): VariablePoolBorrowRateUpdatedEventFilter;
    VariablePoolBorrowRateUpdated(
      sender?: string | null,
      oldBorrowRate?: null,
      newBorrowRate?: null,
    ): VariablePoolBorrowRateUpdatedEventFilter;

    "Withdraw(address,address,address,address,uint256)"(
      sender?: string | null,
      onBehalfOf?: string | null,
      token?: string | null,
      to?: null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      onBehalfOf?: string | null,
      token?: string | null,
      to?: null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
