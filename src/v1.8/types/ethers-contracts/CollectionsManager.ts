/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type CopyLimitOrderConfigStruct = {
  minTenor: BigNumberish;
  maxTenor: BigNumberish;
  minAPR: BigNumberish;
  maxAPR: BigNumberish;
  offsetAPR: BigNumberish;
};

export type CopyLimitOrderConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  minTenor: BigNumber;
  maxTenor: BigNumber;
  minAPR: BigNumber;
  maxAPR: BigNumber;
  offsetAPR: BigNumber;
};

export interface CollectionsManagerInterface extends utils.Interface {
  functions: {
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "addMarketsToCollection(uint256,address[])": FunctionFragment;
    "addRateProvidersToCollectionMarket(uint256,address,address[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "collectionContainsMarket(uint256,address)": FunctionFragment;
    "createCollection()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBorrowOfferAPR(address,uint256,address,address,uint256)": FunctionFragment;
    "getCollectionMarketRateProviders(uint256,address)": FunctionFragment;
    "getLimitOrderAPR(address,uint256,address,address,uint256,bool)": FunctionFragment;
    "getLoanOfferAPR(address,uint256,address,address,uint256)": FunctionFragment;
    "getSubscribedCollections(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isBorrowAPRLowerThanLoanOfferAPRs(address,uint256,address,uint256)": FunctionFragment;
    "isCopyingCollectionMarketRateProvider(address,uint256,address,address)": FunctionFragment;
    "isLoanAPRGreaterThanBorrowOfferAPRs(address,uint256,address,uint256)": FunctionFragment;
    "isSubscribedToCollection(address,uint256)": FunctionFragment;
    "isValidCollectionId(uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeMarketsFromCollection(uint256,address[])": FunctionFragment;
    "removeRateProvidersFromCollectionMarket(uint256,address,address[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setUserCollectionCopyLimitOrderConfigs(address,uint256,(uint256,uint256,uint256,uint256,int256),(uint256,uint256,uint256,uint256,int256))": FunctionFragment;
    "subscribeUserToCollections(address,uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsubscribeUserFromCollections(address,uint256[])": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UPGRADE_INTERFACE_VERSION"
      | "addMarketsToCollection"
      | "addRateProvidersToCollectionMarket"
      | "approve"
      | "balanceOf"
      | "collectionContainsMarket"
      | "createCollection"
      | "getApproved"
      | "getBorrowOfferAPR"
      | "getCollectionMarketRateProviders"
      | "getLimitOrderAPR"
      | "getLoanOfferAPR"
      | "getSubscribedCollections"
      | "initialize"
      | "isApprovedForAll"
      | "isBorrowAPRLowerThanLoanOfferAPRs"
      | "isCopyingCollectionMarketRateProvider"
      | "isLoanAPRGreaterThanBorrowOfferAPRs"
      | "isSubscribedToCollection"
      | "isValidCollectionId"
      | "multicall"
      | "name"
      | "ownerOf"
      | "proxiableUUID"
      | "removeMarketsFromCollection"
      | "removeRateProvidersFromCollectionMarket"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setUserCollectionCopyLimitOrderConfigs"
      | "subscribeUserToCollections"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "unsubscribeUserFromCollections"
      | "upgradeToAndCall",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketsToCollection",
    values: [BigNumberish, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: "addRateProvidersToCollectionMarket",
    values: [BigNumberish, string, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collectionContainsMarket",
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowOfferAPR",
    values: [string, BigNumberish, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionMarketRateProviders",
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderAPR",
    values: [string, BigNumberish, string, string, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanOfferAPR",
    values: [string, BigNumberish, string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribedCollections",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowAPRLowerThanLoanOfferAPRs",
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isCopyingCollectionMarketRateProvider",
    values: [string, BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "isLoanAPRGreaterThanBorrowOfferAPRs",
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribedToCollection",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCollectionId",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketsFromCollection",
    values: [BigNumberish, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: "removeRateProvidersFromCollectionMarket",
    values: [BigNumberish, string, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setUserCollectionCopyLimitOrderConfigs",
    values: [
      string,
      BigNumberish,
      CopyLimitOrderConfigStruct,
      CopyLimitOrderConfigStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeUserToCollections",
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeUserFromCollections",
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketsToCollection",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRateProvidersToCollectionMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionContainsMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionMarketRateProviders",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanOfferAPR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribedCollections",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowAPRLowerThanLoanOfferAPRs",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCopyingCollectionMarketRateProvider",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLoanAPRGreaterThanBorrowOfferAPRs",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribedToCollection",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCollectionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketsFromCollection",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRateProvidersFromCollectionMarket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserCollectionCopyLimitOrderConfigs",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeUserToCollections",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeUserFromCollections",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "MarketAddedToCollection(uint256,address)": EventFragment;
    "MarketRemovedFromCollection(uint256,address)": EventFragment;
    "RateProviderAddedToMarket(uint256,address,address)": EventFragment;
    "RateProviderRemovedFromMarket(uint256,address,address)": EventFragment;
    "SetUserCollectionCopyLimitOrderConfigs(address,uint256,(uint256,uint256,uint256,uint256,int256),(uint256,uint256,uint256,uint256,int256))": EventFragment;
    "SubscribedToCollection(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnsubscribedFromCollection(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketAddedToCollection"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarketRemovedFromCollection",
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateProviderAddedToMarket"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RateProviderRemovedFromMarket",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetUserCollectionCopyLimitOrderConfigs",
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscribedToCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnsubscribedFromCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketAddedToCollectionEventObject {
  collectionId: BigNumber;
  market: string;
}
export type MarketAddedToCollectionEvent = TypedEvent<
  [BigNumber, string],
  MarketAddedToCollectionEventObject
>;

export type MarketAddedToCollectionEventFilter =
  TypedEventFilter<MarketAddedToCollectionEvent>;

export interface MarketRemovedFromCollectionEventObject {
  collectionId: BigNumber;
  market: string;
}
export type MarketRemovedFromCollectionEvent = TypedEvent<
  [BigNumber, string],
  MarketRemovedFromCollectionEventObject
>;

export type MarketRemovedFromCollectionEventFilter =
  TypedEventFilter<MarketRemovedFromCollectionEvent>;

export interface RateProviderAddedToMarketEventObject {
  collectionId: BigNumber;
  market: string;
  rateProvider: string;
}
export type RateProviderAddedToMarketEvent = TypedEvent<
  [BigNumber, string, string],
  RateProviderAddedToMarketEventObject
>;

export type RateProviderAddedToMarketEventFilter =
  TypedEventFilter<RateProviderAddedToMarketEvent>;

export interface RateProviderRemovedFromMarketEventObject {
  collectionId: BigNumber;
  market: string;
  rateProvider: string;
}
export type RateProviderRemovedFromMarketEvent = TypedEvent<
  [BigNumber, string, string],
  RateProviderRemovedFromMarketEventObject
>;

export type RateProviderRemovedFromMarketEventFilter =
  TypedEventFilter<RateProviderRemovedFromMarketEvent>;

export interface SetUserCollectionCopyLimitOrderConfigsEventObject {
  user: string;
  collectionId: BigNumber;
  copyLoanOfferConfig: CopyLimitOrderConfigStructOutput;
  copyBorrowOfferConfig: CopyLimitOrderConfigStructOutput;
}
export type SetUserCollectionCopyLimitOrderConfigsEvent = TypedEvent<
  [
    string,
    BigNumber,
    CopyLimitOrderConfigStructOutput,
    CopyLimitOrderConfigStructOutput,
  ],
  SetUserCollectionCopyLimitOrderConfigsEventObject
>;

export type SetUserCollectionCopyLimitOrderConfigsEventFilter =
  TypedEventFilter<SetUserCollectionCopyLimitOrderConfigsEvent>;

export interface SubscribedToCollectionEventObject {
  user: string;
  collectionId: BigNumber;
}
export type SubscribedToCollectionEvent = TypedEvent<
  [string, BigNumber],
  SubscribedToCollectionEventObject
>;

export type SubscribedToCollectionEventFilter =
  TypedEventFilter<SubscribedToCollectionEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnsubscribedFromCollectionEventObject {
  user: string;
  collectionId: BigNumber;
}
export type UnsubscribedFromCollectionEvent = TypedEvent<
  [string, BigNumber],
  UnsubscribedFromCollectionEventObject
>;

export type UnsubscribedFromCollectionEventFilter =
  TypedEventFilter<UnsubscribedFromCollectionEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CollectionsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectionsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    addMarketsToCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    addRateProvidersToCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    collectionContainsMarket(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    createCollection(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getBorrowOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { apr: BigNumber }>;

    getCollectionMarketRateProviders(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getLimitOrderAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      isLoanOffer: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { apr: BigNumber }>;

    getLoanOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { apr: BigNumber }>;

    getSubscribedCollections(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { collectionIds: BigNumber[] }>;

    initialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isBorrowAPRLowerThanLoanOfferAPRs(
      user: string,
      borrowAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isCopyingCollectionMarketRateProvider(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isLoanAPRGreaterThanBorrowOfferAPRs(
      user: string,
      loanAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isSubscribedToCollection(
      user: string,
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isValidCollectionId(
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeMarketsFromCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    removeRateProvidersFromCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setUserCollectionCopyLimitOrderConfigs(
      user: string,
      collectionId: BigNumberish,
      copyLoanOfferConfig: CopyLimitOrderConfigStruct,
      copyBorrowOfferConfig: CopyLimitOrderConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    subscribeUserToCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unsubscribeUserFromCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  addMarketsToCollection(
    collectionId: BigNumberish,
    markets: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  addRateProvidersToCollectionMarket(
    collectionId: BigNumberish,
    market: string,
    rateProviders: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  collectionContainsMarket(
    collectionId: BigNumberish,
    market: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  createCollection(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getBorrowOfferAPR(
    user: string,
    collectionId: BigNumberish,
    market: string,
    rateProvider: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCollectionMarketRateProviders(
    collectionId: BigNumberish,
    market: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getLimitOrderAPR(
    user: string,
    collectionId: BigNumberish,
    market: string,
    rateProvider: string,
    tenor: BigNumberish,
    isLoanOffer: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLoanOfferAPR(
    user: string,
    collectionId: BigNumberish,
    market: string,
    rateProvider: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSubscribedCollections(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  initialize(
    _sizeFactory: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isBorrowAPRLowerThanLoanOfferAPRs(
    user: string,
    borrowAPR: BigNumberish,
    market: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isCopyingCollectionMarketRateProvider(
    user: string,
    collectionId: BigNumberish,
    market: string,
    rateProvider: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isLoanAPRGreaterThanBorrowOfferAPRs(
    user: string,
    loanAPR: BigNumberish,
    market: string,
    tenor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isSubscribedToCollection(
    user: string,
    collectionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isValidCollectionId(
    collectionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeMarketsFromCollection(
    collectionId: BigNumberish,
    markets: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  removeRateProvidersFromCollectionMarket(
    collectionId: BigNumberish,
    market: string,
    rateProviders: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setUserCollectionCopyLimitOrderConfigs(
    user: string,
    collectionId: BigNumberish,
    copyLoanOfferConfig: CopyLimitOrderConfigStruct,
    copyBorrowOfferConfig: CopyLimitOrderConfigStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  subscribeUserToCollections(
    user: string,
    collectionIds: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unsubscribeUserFromCollections(
    user: string,
    collectionIds: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    addMarketsToCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addRateProvidersToCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    collectionContainsMarket(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    createCollection(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getBorrowOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollectionMarketRateProviders(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getLimitOrderAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      isLoanOffer: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSubscribedCollections(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    initialize(_sizeFactory: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isBorrowAPRLowerThanLoanOfferAPRs(
      user: string,
      borrowAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isCopyingCollectionMarketRateProvider(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isLoanAPRGreaterThanBorrowOfferAPRs(
      user: string,
      loanAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isSubscribedToCollection(
      user: string,
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isValidCollectionId(
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeMarketsFromCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    removeRateProvidersFromCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserCollectionCopyLimitOrderConfigs(
      user: string,
      collectionId: BigNumberish,
      copyLoanOfferConfig: CopyLimitOrderConfigStruct,
      copyBorrowOfferConfig: CopyLimitOrderConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    subscribeUserToCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    unsubscribeUserFromCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarketAddedToCollection(uint256,address)"(
      collectionId?: BigNumberish | null,
      market?: string | null,
    ): MarketAddedToCollectionEventFilter;
    MarketAddedToCollection(
      collectionId?: BigNumberish | null,
      market?: string | null,
    ): MarketAddedToCollectionEventFilter;

    "MarketRemovedFromCollection(uint256,address)"(
      collectionId?: BigNumberish | null,
      market?: string | null,
    ): MarketRemovedFromCollectionEventFilter;
    MarketRemovedFromCollection(
      collectionId?: BigNumberish | null,
      market?: string | null,
    ): MarketRemovedFromCollectionEventFilter;

    "RateProviderAddedToMarket(uint256,address,address)"(
      collectionId?: BigNumberish | null,
      market?: string | null,
      rateProvider?: string | null,
    ): RateProviderAddedToMarketEventFilter;
    RateProviderAddedToMarket(
      collectionId?: BigNumberish | null,
      market?: string | null,
      rateProvider?: string | null,
    ): RateProviderAddedToMarketEventFilter;

    "RateProviderRemovedFromMarket(uint256,address,address)"(
      collectionId?: BigNumberish | null,
      market?: string | null,
      rateProvider?: string | null,
    ): RateProviderRemovedFromMarketEventFilter;
    RateProviderRemovedFromMarket(
      collectionId?: BigNumberish | null,
      market?: string | null,
      rateProvider?: string | null,
    ): RateProviderRemovedFromMarketEventFilter;

    "SetUserCollectionCopyLimitOrderConfigs(address,uint256,(uint256,uint256,uint256,uint256,int256),(uint256,uint256,uint256,uint256,int256))"(
      user?: string | null,
      collectionId?: BigNumberish | null,
      copyLoanOfferConfig?: null,
      copyBorrowOfferConfig?: null,
    ): SetUserCollectionCopyLimitOrderConfigsEventFilter;
    SetUserCollectionCopyLimitOrderConfigs(
      user?: string | null,
      collectionId?: BigNumberish | null,
      copyLoanOfferConfig?: null,
      copyBorrowOfferConfig?: null,
    ): SetUserCollectionCopyLimitOrderConfigsEventFilter;

    "SubscribedToCollection(address,uint256)"(
      user?: string | null,
      collectionId?: BigNumberish | null,
    ): SubscribedToCollectionEventFilter;
    SubscribedToCollection(
      user?: string | null,
      collectionId?: BigNumberish | null,
    ): SubscribedToCollectionEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;

    "UnsubscribedFromCollection(address,uint256)"(
      user?: string | null,
      collectionId?: BigNumberish | null,
    ): UnsubscribedFromCollectionEventFilter;
    UnsubscribedFromCollection(
      user?: string | null,
      collectionId?: BigNumberish | null,
    ): UnsubscribedFromCollectionEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMarketsToCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    addRateProvidersToCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    collectionContainsMarket(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createCollection(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollectionMarketRateProviders(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLimitOrderAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      isLoanOffer: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSubscribedCollections(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isBorrowAPRLowerThanLoanOfferAPRs(
      user: string,
      borrowAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isCopyingCollectionMarketRateProvider(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isLoanAPRGreaterThanBorrowOfferAPRs(
      user: string,
      loanAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isSubscribedToCollection(
      user: string,
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isValidCollectionId(
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeMarketsFromCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    removeRateProvidersFromCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setUserCollectionCopyLimitOrderConfigs(
      user: string,
      collectionId: BigNumberish,
      copyLoanOfferConfig: CopyLimitOrderConfigStruct,
      copyBorrowOfferConfig: CopyLimitOrderConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    subscribeUserToCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unsubscribeUserFromCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addMarketsToCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    addRateProvidersToCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    collectionContainsMarket(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createCollection(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCollectionMarketRateProviders(
      collectionId: BigNumberish,
      market: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLimitOrderAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      isLoanOffer: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanOfferAPR(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSubscribedCollections(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _sizeFactory: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isBorrowAPRLowerThanLoanOfferAPRs(
      user: string,
      borrowAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isCopyingCollectionMarketRateProvider(
      user: string,
      collectionId: BigNumberish,
      market: string,
      rateProvider: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isLoanAPRGreaterThanBorrowOfferAPRs(
      user: string,
      loanAPR: BigNumberish,
      market: string,
      tenor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isSubscribedToCollection(
      user: string,
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isValidCollectionId(
      collectionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMarketsFromCollection(
      collectionId: BigNumberish,
      markets: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    removeRateProvidersFromCollectionMarket(
      collectionId: BigNumberish,
      market: string,
      rateProviders: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setUserCollectionCopyLimitOrderConfigs(
      user: string,
      collectionId: BigNumberish,
      copyLoanOfferConfig: CopyLimitOrderConfigStruct,
      copyBorrowOfferConfig: CopyLimitOrderConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    subscribeUserToCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unsubscribeUserFromCollections(
      user: string,
      collectionIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
